/* Code generated by github.com/srdtrk/go-codegen, DO NOT EDIT. */
package ics07tendermint

import (
	"context"
	"encoding/json"
	wasmtypes "github.com/CosmWasm/wasmd/x/wasm/types"
	grpc "google.golang.org/grpc"
	insecure "google.golang.org/grpc/credentials/insecure"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ExportMetadata is the client API for the QueryMsg_ExportMetadata query message
	ExportMetadata(ctx context.Context, req *QueryMsg_ExportMetadata, opts ...grpc.CallOption) (*ExportMetadata, error)
	// Ownership is the client API for the QueryMsg_Ownership query message
	Ownership(ctx context.Context, req *QueryMsg_Ownership, opts ...grpc.CallOption) (*Ownership_for_String, error)
	// Status is the client API for the QueryMsg_Status query message
	Status(ctx context.Context, req *QueryMsg_Status, opts ...grpc.CallOption) (*Status, error)
	// TimestampAtHeight is the client API for the QueryMsg_TimestampAtHeight query message
	TimestampAtHeight(ctx context.Context, req *QueryMsg_TimestampAtHeight, opts ...grpc.CallOption) (*TimestampAtHeight, error)
	// VerifyClientMessage is the client API for the QueryMsg_VerifyClientMessage query message
	VerifyClientMessage(ctx context.Context, req *QueryMsg_VerifyClientMessage, opts ...grpc.CallOption) (*VerifyClientMessage, error)
	// VerifyMembership is the client API for the QueryMsg_VerifyMembership query message
	VerifyMembership(ctx context.Context, req *QueryMsg_VerifyMembership, opts ...grpc.CallOption) (*ContractResult, error)
	// VerifyNonMembership is the client API for the QueryMsg_VerifyNonMembership query message
	VerifyNonMembership(ctx context.Context, req *QueryMsg_VerifyNonMembership, opts ...grpc.CallOption) (*ContractResult, error)
	// CheckForMisbehaviour is the client API for the QueryMsg_CheckForMisbehaviour query message
	CheckForMisbehaviour(ctx context.Context, req *QueryMsg_CheckForMisbehaviour, opts ...grpc.CallOption) (*CheckForMisbehaviour, error)
}

type queryClient struct {
	cc      *grpc.ClientConn
	address string
}

var _ QueryClient = (*queryClient)(nil)

// NewQueryClient creates a new QueryClient
func NewQueryClient(gRPCAddress, contractAddress string, opts ...grpc.DialOption) (QueryClient, error) {
	if len(opts) == 0 {
		opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	}

	// Create a connection to the gRPC server
	grpcConn, err := grpc.Dial(gRPCAddress, opts...)
	if err != nil {
		return nil, err
	}

	return &queryClient{
		address: contractAddress,
		cc:      grpcConn,
	}, nil
}

// Close closes the gRPC connection to the server
func (q *queryClient) Close() error {
	return q.cc.Close()
}

// queryContract is a helper function to query the contract with raw query data
func (q *queryClient) queryContract(ctx context.Context, rawQueryData []byte, opts ...grpc.CallOption) ([]byte, error) {
	in := &wasmtypes.QuerySmartContractStateRequest{
		Address:   q.address,
		QueryData: rawQueryData,
	}
	out := new(wasmtypes.QuerySmartContractStateResponse)
	err := q.cc.Invoke(ctx, "/cosmwasm.wasm.v1.Query/SmartContractState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out.Data, nil
}

func (q *queryClient) Status(ctx context.Context, req *QueryMsg_Status, opts ...grpc.CallOption) (*Status, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{Status: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response Status
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) TimestampAtHeight(ctx context.Context, req *QueryMsg_TimestampAtHeight, opts ...grpc.CallOption) (*TimestampAtHeight, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{TimestampAtHeight: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response TimestampAtHeight
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) VerifyClientMessage(ctx context.Context, req *QueryMsg_VerifyClientMessage, opts ...grpc.CallOption) (*VerifyClientMessage, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{VerifyClientMessage: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response VerifyClientMessage
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) VerifyMembership(ctx context.Context, req *QueryMsg_VerifyMembership, opts ...grpc.CallOption) (*ContractResult, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{VerifyMembership: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response ContractResult
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) VerifyNonMembership(ctx context.Context, req *QueryMsg_VerifyNonMembership, opts ...grpc.CallOption) (*ContractResult, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{VerifyNonMembership: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response ContractResult
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) CheckForMisbehaviour(ctx context.Context, req *QueryMsg_CheckForMisbehaviour, opts ...grpc.CallOption) (*CheckForMisbehaviour, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{CheckForMisbehaviour: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response CheckForMisbehaviour
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) ExportMetadata(ctx context.Context, req *QueryMsg_ExportMetadata, opts ...grpc.CallOption) (*ExportMetadata, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{ExportMetadata: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response ExportMetadata
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

func (q *queryClient) Ownership(ctx context.Context, req *QueryMsg_Ownership, opts ...grpc.CallOption) (*Ownership_for_String, error) {
	rawQueryData, err := json.Marshal(&QueryMsg{Ownership: req})
	if err != nil {
		return nil, err
	}

	rawResponseData, err := q.queryContract(ctx, rawQueryData, opts...)
	if err != nil {
		return nil, err
	}

	var response Ownership_for_String
	if err := json.Unmarshal(rawResponseData, &response); err != nil {
		return nil, err
	}

	return &response, nil
}
