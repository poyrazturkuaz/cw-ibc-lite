/* Code generated by github.com/srdtrk/go-codegen, DO NOT EDIT. */
package ics07tendermint

// Instantiate message for all light client contracts in ibc-lite
type InstantiateMsg struct {
	// The initial client state.
	ClientState Binary `json:"client_state"`
	// The initial consensus state.
	ConsensusState Binary `json:"consensus_state"`
}

// Execute messages supported by all light client contracts in ibc-lite
type ExecuteMsg struct {
	// Update the client state
	UpdateState *ExecuteMsg_UpdateState `json:"update_state,omitempty"`
	// Update the client state on misbehaviour
	UpdateStateOnMisbehaviour *ExecuteMsg_UpdateStateOnMisbehaviour `json:"update_state_on_misbehaviour,omitempty"`
	// Verify upgrade and update the client state
	VerifyUpgradeAndUpdateState *ExecuteMsg_VerifyUpgradeAndUpdateState `json:"verify_upgrade_and_update_state,omitempty"`
}

// Query messages supported by all light client contracts in ibc-lite
type QueryMsg struct {
	// Get the status of the client
	Status *QueryMsg_Status `json:"status,omitempty"`
	// Export the metadata
	ExportMetadata *QueryMsg_ExportMetadata `json:"export_metadata,omitempty"`
	// Get the timestamp at the given height
	TimestampAtHeight *QueryMsg_TimestampAtHeight `json:"timestamp_at_height,omitempty"`
	// Verify the client message
	VerifyClientMessage *QueryMsg_VerifyClientMessage `json:"verify_client_message,omitempty"`
	// Check for misbehaviour
	CheckForMisbehaviour *QueryMsg_CheckForMisbehaviour `json:"check_for_misbehaviour,omitempty"`
	// Verify membership
	VerifyMembership *QueryMsg_VerifyMembership `json:"verify_membership,omitempty"`
	// Verify non-membership
	VerifyNonMembership *QueryMsg_VerifyNonMembership `json:"verify_non_membership,omitempty"`
	// Query the contract's ownership information
	Ownership *QueryMsg_Ownership `json:"ownership,omitempty"`
}

/*
A point in time in nanosecond precision.

This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.

## Examples

``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);

let ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```
*/
type Timestamp Uint64

type VerifyUpgradeAndUpdateStateMsgRaw struct {
	ProofUpgradeClient string `json:"proof_upgrade_client"`
	ProofUpgradeConsensusState string `json:"proof_upgrade_consensus_state"`
	UpgradeClientState string `json:"upgrade_client_state"`
	UpgradeConsensusState string `json:"upgrade_consensus_state"`
}
type QueryMsg_VerifyClientMessage VerifyClientMessageRaw

type QueryMsg_Ownership struct{}
type ExecuteMsg_UpdateState UpdateStateMsgRaw

type VerifyNonMembershipMsgRaw struct {
	DelayBlockPeriod int `json:"delay_block_period"`
	DelayTimePeriod int `json:"delay_time_period"`
	Height Height2 `json:"height"`
	Path MerklePath `json:"path"`
	Proof string `json:"proof"`
}

/*
Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients

Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
*/
type Height2 struct {
	// the height within the given revision
	RevisionHeight int `json:"revision_height"`
	// the revision that the client is currently on
	RevisionNumber int `json:"revision_number"`
}

type VerifyMembershipMsgRaw struct {
	DelayBlockPeriod int `json:"delay_block_period"`
	DelayTimePeriod int `json:"delay_time_period"`
	Height Height2 `json:"height"`
	Path MerklePath `json:"path"`
	Proof string `json:"proof"`
	Value string `json:"value"`
}

// The core IBC height type, which represents the height of a chain, which typically is the number of blocks since genesis (or more generally, since the last revision/hard upgrade).
type Height struct {
	// The height of a block
	RevisionHeight int `json:"revision_height"`
	// Previously known as "epoch"
	RevisionNumber int `json:"revision_number"`
}

type TimestampAtHeightMsg struct {
	Height Height `json:"height"`
}

type CheckForMisbehaviourMsgRaw struct {
	ClientMessage string `json:"client_message"`
}

type ContractResult struct {
	Heights []Height `json:"heights"`
}
type ExecuteMsg_UpdateStateOnMisbehaviour UpdateStateOnMisbehaviourMsgRaw

type UpdateStateMsgRaw struct {
	ClientMessage string `json:"client_message"`
}

type VerifyClientMessageRaw struct {
	ClientMessage string `json:"client_message"`
}

// The response to [`super::QueryMsg::TimestampAtHeight`]
type TimestampAtHeight struct {
	// The timestamp at the given height
	Timestamp int `json:"timestamp"`
}

// The response to [`super::QueryMsg::VerifyClientMessage`]
type VerifyClientMessage struct {
	// Whether the client message is valid
	IsValid bool `json:"is_valid"`
}
type QueryMsg_TimestampAtHeight TimestampAtHeightMsg

type GenesisMetadata struct {
	Key []int `json:"key"`
	Value []int `json:"value"`
}

// The response to [`super::QueryMsg::ExportMetadata`]
type ExportMetadata struct {
	// The genesis metadata
	Metadata []GenesisMetadata `json:"metadata"`
}

type ExportMetadataMsg struct{}

// The contract's ownership info
type Ownership_for_String struct {
	// The contract's current owner. `None` if the ownership has been renounced.
	Owner *string `json:"owner,omitempty"`
	// The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.
	PendingExpiry *Expiration `json:"pending_expiry,omitempty"`
	// The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.
	PendingOwner *string `json:"pending_owner,omitempty"`
}

type UpdateStateOnMisbehaviourMsgRaw struct {
	ClientMessage string `json:"client_message"`
}
type QueryMsg_ExportMetadata ExportMetadataMsg
type QueryMsg_CheckForMisbehaviour CheckForMisbehaviourMsgRaw

// The response to [`super::QueryMsg::Status`]
type Status struct {
	// The status of the client
	Status string `json:"status"`
}

/*
Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.

This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
*/
type Binary string
type QueryMsg_Status StatusMsg
type QueryMsg_VerifyNonMembership VerifyNonMembershipMsgRaw

/*
A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.

# Examples

Use `from` to create instances of this and `u64` to get the value out:

``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);

let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
*/
type Uint64 string

// Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
type Expiration struct {
	// AtHeight will expire when `env.block.height` >= height
	AtHeight *Expiration_AtHeight `json:"at_height,omitempty"`
	// AtTime will expire when `env.block.time` >= time
	AtTime *Expiration_AtTime `json:"at_time,omitempty"`
	// Never will never expire. Used to express the empty variant
	Never *Expiration_Never `json:"never,omitempty"`
}
type ExecuteMsg_VerifyUpgradeAndUpdateState VerifyUpgradeAndUpdateStateMsgRaw

type MerklePath struct {
	KeyPath []string `json:"key_path"`
}

// The response to [`super::QueryMsg::CheckForMisbehaviour`]
type CheckForMisbehaviour struct {
	// Whether misbehaviour was found
	FoundMisbehaviour bool `json:"found_misbehaviour"`
}
type QueryMsg_VerifyMembership VerifyMembershipMsgRaw

type StatusMsg struct{}

type Expiration_AtHeight int
type Expiration_AtTime Timestamp

type Expiration_Never struct{}
